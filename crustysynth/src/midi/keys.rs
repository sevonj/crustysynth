use std::{error::Error, fmt::Display};

#[derive(Debug, PartialEq, Eq)]
pub enum MidiKey {
    C0 = 0x00,
    CS0 = 0x01,
    D0 = 0x02,
    DS0 = 0x03,
    E0 = 0x04,
    F0 = 0x05,
    FS0 = 0x06,
    G0 = 0x07,
    GS0 = 0x08,
    A0 = 0x09,
    AS0 = 0x0A,
    B0 = 0x0B,
    C1 = 0x0C,
    CS1 = 0x0D,
    D1 = 0x0E,
    DS1 = 0x0F,
    E1 = 0x10,
    F1 = 0x11,
    FS1 = 0x12,
    G1 = 0x13,
    GS1 = 0x14,
    A1 = 0x15,
    AS1 = 0x16,
    B1 = 0x17,
    C2 = 0x18,
    CS2 = 0x19,
    D2 = 0x1A,
    DS2 = 0x1B,
    E2 = 0x1C,
    F2 = 0x1D,
    FS2 = 0x1E,
    G2 = 0x1F,
    GS2 = 0x20,
    A2 = 0x21,
    AS2 = 0x22,
    B2 = 0x23,
    C3 = 0x24,
    CS3 = 0x25,
    D3 = 0x26,
    DS3 = 0x27,
    E3 = 0x28,
    F3 = 0x29,
    FS3 = 0x2A,
    G3 = 0x2B,
    GS3 = 0x2C,
    A3 = 0x2D,
    AS3 = 0x2E,
    B3 = 0x2F,
    C4 = 0x30,
    CS4 = 0x31,
    D4 = 0x32,
    DS4 = 0x33,
    E4 = 0x34,
    F4 = 0x35,
    FS4 = 0x36,
    G4 = 0x37,
    GS4 = 0x38,
    A4 = 0x39,
    AS4 = 0x3A,
    B4 = 0x3B,
    C5 = 0x3C,
    CS5 = 0x3D,
    D5 = 0x3E,
    DS5 = 0x3F,
    E5 = 0x40,
    F5 = 0x41,
    FS5 = 0x42,
    G5 = 0x43,
    GS5 = 0x44,
    A5 = 0x45,
    AS5 = 0x46,
    B5 = 0x47,
    C6 = 0x48,
    CS6 = 0x49,
    D6 = 0x4A,
    DS6 = 0x4B,
    E6 = 0x4C,
    F6 = 0x4D,
    FS6 = 0x4E,
    G6 = 0x4F,
    GS6 = 0x50,
    A6 = 0x51,
    AS6 = 0x52,
    B6 = 0x53,
    C7 = 0x54,
    CS7 = 0x55,
    D7 = 0x56,
    DS7 = 0x57,
    E7 = 0x58,
    F7 = 0x59,
    FS7 = 0x5A,
    G7 = 0x5B,
    GS7 = 0x5C,
    A7 = 0x5D,
    AS7 = 0x5E,
    B7 = 0x5F,
    C8 = 0x60,
    CS8 = 0x61,
    D8 = 0x62,
    DS8 = 0x63,
    E8 = 0x64,
    F8 = 0x65,
    FS8 = 0x66,
    G8 = 0x67,
    GS8 = 0x68,
    A8 = 0x69,
    AS8 = 0x6A,
    B8 = 0x6B,
    C9 = 0x6C,
    CS9 = 0x6D,
    D9 = 0x6E,
    DS9 = 0x6F,
    E9 = 0x70,
    F9 = 0x71,
    FS9 = 0x72,
    G9 = 0x73,
    GS9 = 0x74,
    A9 = 0x75,
    AS9 = 0x76,
    B9 = 0x77,
    C10 = 0x78,
    CS10 = 0x79,
    D10 = 0x7A,
    DS10 = 0x7B,
    E10 = 0x7C,
    F10 = 0x7D,
    FS10 = 0x7E,
    G10 = 0x7F,
}

#[derive(Debug)]
pub enum MidiKeyError {
    NotAKey(u8),
}
impl Error for MidiKeyError {}
impl Display for MidiKeyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::NotAKey(val) => write!(f, "Midi Key out of range: {val:#04x}"),
        }
    }
}

impl TryFrom<u8> for MidiKey {
    type Error = MidiKeyError;

    fn try_from(v: u8) -> Result<Self, Self::Error> {
        match v {
            0x00 => Ok(Self::C0),
            0x01 => Ok(Self::CS0),
            0x02 => Ok(Self::D0),
            0x03 => Ok(Self::DS0),
            0x04 => Ok(Self::E0),
            0x05 => Ok(Self::F0),
            0x06 => Ok(Self::FS0),
            0x07 => Ok(Self::G0),
            0x08 => Ok(Self::GS0),
            0x09 => Ok(Self::A0),
            0x0A => Ok(Self::AS0),
            0x0B => Ok(Self::B0),
            0x0C => Ok(Self::C1),
            0x0D => Ok(Self::CS1),
            0x0E => Ok(Self::D1),
            0x0F => Ok(Self::DS1),
            0x10 => Ok(Self::E1),
            0x11 => Ok(Self::F1),
            0x12 => Ok(Self::FS1),
            0x13 => Ok(Self::G1),
            0x14 => Ok(Self::GS1),
            0x15 => Ok(Self::A1),
            0x16 => Ok(Self::AS1),
            0x17 => Ok(Self::B1),
            0x18 => Ok(Self::C2),
            0x19 => Ok(Self::CS2),
            0x1A => Ok(Self::D2),
            0x1B => Ok(Self::DS2),
            0x1C => Ok(Self::E2),
            0x1D => Ok(Self::F2),
            0x1E => Ok(Self::FS2),
            0x1F => Ok(Self::G2),
            0x20 => Ok(Self::GS2),
            0x21 => Ok(Self::A2),
            0x22 => Ok(Self::AS2),
            0x23 => Ok(Self::B2),
            0x24 => Ok(Self::C3),
            0x25 => Ok(Self::CS3),
            0x26 => Ok(Self::D3),
            0x27 => Ok(Self::DS3),
            0x28 => Ok(Self::E3),
            0x29 => Ok(Self::F3),
            0x2A => Ok(Self::FS3),
            0x2B => Ok(Self::G3),
            0x2C => Ok(Self::GS3),
            0x2D => Ok(Self::A3),
            0x2E => Ok(Self::AS3),
            0x2F => Ok(Self::B3),
            0x30 => Ok(Self::C4),
            0x31 => Ok(Self::CS4),
            0x32 => Ok(Self::D4),
            0x33 => Ok(Self::DS4),
            0x34 => Ok(Self::E4),
            0x35 => Ok(Self::F4),
            0x36 => Ok(Self::FS4),
            0x37 => Ok(Self::G4),
            0x38 => Ok(Self::GS4),
            0x39 => Ok(Self::A4),
            0x3A => Ok(Self::AS4),
            0x3B => Ok(Self::B4),
            0x3C => Ok(Self::C5),
            0x3D => Ok(Self::CS5),
            0x3E => Ok(Self::D5),
            0x3F => Ok(Self::DS5),
            0x40 => Ok(Self::E5),
            0x41 => Ok(Self::F5),
            0x42 => Ok(Self::FS5),
            0x43 => Ok(Self::G5),
            0x44 => Ok(Self::GS5),
            0x45 => Ok(Self::A5),
            0x46 => Ok(Self::AS5),
            0x47 => Ok(Self::B5),
            0x48 => Ok(Self::C6),
            0x49 => Ok(Self::CS6),
            0x4A => Ok(Self::D6),
            0x4B => Ok(Self::DS6),
            0x4C => Ok(Self::E6),
            0x4D => Ok(Self::F6),
            0x4E => Ok(Self::FS6),
            0x4F => Ok(Self::G6),
            0x50 => Ok(Self::GS6),
            0x51 => Ok(Self::A6),
            0x52 => Ok(Self::AS6),
            0x53 => Ok(Self::B6),
            0x54 => Ok(Self::C7),
            0x55 => Ok(Self::CS7),
            0x56 => Ok(Self::D7),
            0x57 => Ok(Self::DS7),
            0x58 => Ok(Self::E7),
            0x59 => Ok(Self::F7),
            0x5A => Ok(Self::FS7),
            0x5B => Ok(Self::G7),
            0x5C => Ok(Self::GS7),
            0x5D => Ok(Self::A7),
            0x5E => Ok(Self::AS7),
            0x5F => Ok(Self::B7),
            0x60 => Ok(Self::C8),
            0x61 => Ok(Self::CS8),
            0x62 => Ok(Self::D8),
            0x63 => Ok(Self::DS8),
            0x64 => Ok(Self::E8),
            0x65 => Ok(Self::F8),
            0x66 => Ok(Self::FS8),
            0x67 => Ok(Self::G8),
            0x68 => Ok(Self::GS8),
            0x69 => Ok(Self::A8),
            0x6A => Ok(Self::AS8),
            0x6B => Ok(Self::B8),
            0x6C => Ok(Self::C9),
            0x6D => Ok(Self::CS9),
            0x6E => Ok(Self::D9),
            0x6F => Ok(Self::DS9),
            0x70 => Ok(Self::E9),
            0x71 => Ok(Self::F9),
            0x72 => Ok(Self::FS9),
            0x73 => Ok(Self::G9),
            0x74 => Ok(Self::GS9),
            0x75 => Ok(Self::A9),
            0x76 => Ok(Self::AS9),
            0x77 => Ok(Self::B9),
            0x78 => Ok(Self::C10),
            0x79 => Ok(Self::CS10),
            0x7A => Ok(Self::D10),
            0x7B => Ok(Self::DS10),
            0x7C => Ok(Self::E10),
            0x7D => Ok(Self::F10),
            0x7E => Ok(Self::FS10),
            0x7F => Ok(Self::G10),
            128..=255 => Err(MidiKeyError::NotAKey(v)),
        }
    }
}

impl From<MidiKey> for u8 {
    fn from(note: MidiKey) -> Self {
        note as u8
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    /// Because there could be typos.
    #[test]
    fn test_keys_are_correct() {
        for i in 0..128 {
            let key_name = match i % 12 {
                0 => "C",
                1 => "CS",
                2 => "D",
                3 => "DS",
                4 => "E",
                5 => "F",
                6 => "FS",
                7 => "G",
                8 => "GS",
                9 => "A",
                10 => "AS",
                11 => "B",
                _ => unreachable!(),
            };
            let octave = (i - i % 12) / 12;

            let expected_str = format!("{key_name}{octave}");
            let result_str = format!("{:?}", MidiKey::try_from(i).unwrap());
            assert_eq!(expected_str, result_str);
        }
    }
}
